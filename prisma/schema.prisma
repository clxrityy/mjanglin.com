generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Birthday {
  id      String @id
  userId  String
  guildId String
  month   Int
  day     Int
}

model Cooldown {
  id        String   @id
  userId    String
  command   String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '00:01:00'::interval)"))
  User      User     @relation(fields: [userId], references: [id])
}

model Guild {
  id              String   @id
  guildId         String   @unique
  userId          String
  changeable      Boolean  @default(false)
  adminRoleId     String?
  birthdayRoleId  String?
  birthdayMessage String?
  User            User     @relation(fields: [userId], references: [id])
  Wish            Wish[]
  Member          Member[] @relation("GuildToMember")
}

model Member {
  id             String   @id
  userId         String
  friends        String[]
  friendRequests String[]
  User           User     @relation(fields: [userId], references: [id])
  Guild          Guild[]  @relation("GuildToMember")
}

model User {
  id           String     @id
  userId       String     @unique
  accessToken  String     @unique
  refreshToken String     @unique
  Cooldown     Cooldown[]
  Guild        Guild[]
  Member       Member[]
}

model Wish {
  id           String @id
  userId       String
  guildId      String
  targetUserId String
  message      String
  year         Int    @default(2024)
  Guild        Guild  @relation(fields: [guildId], references: [id])
}

model SleepUser {
  id        String      @id
  userId    String      @unique
  username  String
  avatar    String      @default("https://cdn.discordapp.com/attachments/1020419727731986613/1257156315466174526/default_clock.png?ex=6683618e&is=6682100e&hm=3149313c2ed7e676c5dffe39f2461c0d9f85f882564a208c404ff31905ee4b72&")
  updatedAt DateTime    @default(now())
  createdAt DateTime    @default(now())
  sessionId String
  sleepData SleepData[]
}

model SleepData {
  id        String    @id @default(uuid())
  userId    String
  date      DateTime
  duration  Int
  sleepUser SleepUser @relation(fields: [userId], references: [userId])
}

model Blog {
  id             String   @id
  title          String
  content        String
  previewContent String
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  userId         String
  uuid           String   @unique
}

model DivinityBaseItem {
  id                    String                  @id
  uuid                  String                  @unique
  description           String
  name                  String
  updatedAt             DateTime                @default(now())
  DivinityInventoryItem DivinityInventoryItem[]
}

model DivinityGame {
  id                    String                  @id
  gameId                String                  @unique
  userId                String                  @unique
  experience            Int
  DivinityInventoryItem DivinityInventoryItem[]
}

model DivinityInventoryItem {
  id               String           @id
  userId           String
  gameId           String
  uuid             String
  tier             Int
  name             String
  experience       Int?
  DivinityGame     DivinityGame     @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  DivinityBaseItem DivinityBaseItem @relation(fields: [uuid], references: [uuid])
}

model DivinityUser {
  id       String  @id
  userId   String  @unique
  username String?
  gameId   String?
}
